

## Books {#books_title}

There are many PHP books; sadly some are now quite old and no longer accurate. In particular, avoid books on "PHP 6", a version that will now never exist. The next major release of PHP after 5.6 was "PHP 7", [partly because of this](https://wiki.php.net/rfc/php6).

This section aims to be a living document for recommended books on PHP development in general. If you would like your
book to be added, send a PR and it will be reviewed for relevancy.

### Free Books

* [PHP Pandas](http://daylerees.com/php-pandas/) - Aims to teach everyone how to be a web developer.
* [PHP The Right Way](https://leanpub.com/phptherightway/) - This website is available as a book completely for free.
* [Using Libsodium in PHP Projects](https://paragonie.com/book/pecl-libsodium) - Guide to using Libsodium PHP extension
for modern, secure, and fast cryptography.

### Paid Books

* [Build APIs You Won't Hate](https://apisyouwonthate.com/) - Everyone and their dog wants an API,
so you should probably learn how to build them.
* [Modern PHP](http://shop.oreilly.com/product/0636920033868.do) - covers modern PHP features, best practices, testing, tuning, deployment and setting up a dev environment.
* [Building Secure PHP Apps](https://leanpub.com/buildingsecurephpapps) - Learn the security basics that a senior
developer usually acquires over years of experience, all condensed down into one quick and easy handbook
* [Modernizing Legacy Applications In PHP](https://leanpub.com/mlaphp) - Get your code under control in a series of
small, specific steps
* [Securing PHP: Core Concepts](https://leanpub.com/securingphp-coreconcepts) - A guide to some of the most common
security terms and provides some examples of them in every day PHP
* [Scaling PHP](http://www.scalingphpbook.com/) - Stop playing sysadmin and get back to coding
* [Signaling PHP](https://leanpub.com/signalingphp) - PCNLT signals are a great help when writing PHP scripts that
run from the command line.
* [Minimum Viable Tests](https://leanpub.com/minimumviabletests) - Long-time PHP testing evangelist Chris Hartjes goes over what he feels is the minimum you need to know to get started.
* [Domain-Driven Design in PHP](https://leanpub.com/ddd-in-php) - See real examples written in PHP showcasing Domain-Driven Design Architectural Styles (Hexagonal Architecture, CQRS or Event Sourcing), Tactical Design Patterns, and Bounded Context Integration.


## People to Follow {#people_to_follow_title}

It's difficult to find interesting and knowledgeable PHP
community members when you are first starting out. You can
find an abbreviated list of PHP community members to get you started at:

* <https://www.ogprogrammer.com/2017/06/28/how-to-get-connected-with-the-php-community/>
* <https://twitter.com/CalEvans/lists/phpeople>


## Other Useful Resources {#other_resources_title}

### Cheatsheets

* [PHP Cheatsheets](http://phpcheatsheets.com/) - for variable comparisons, arithmetics and variable testing in various PHP versions.
* [Modern PHP Cheatsheet](https://github.com/smknstd/modern-php-cheatsheet) documents modern (PHP 7.0+) idioms in a unified document.
* [OWASP Security Cheatsheets](https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series) - provides a concise collection of high value information on specific application security topics. 

### More best practices

* [PHP Best Practices](https://phpbestpractices.org/)
* [Why You Should Be Using Supported PHP Versions](https://kinsta.com/blog/php-versions/)

### News around the PHP and web development communities

You can subscribe to weekly newsletters to keep yourself informed on new libraries, latest news, events and general
announcements, as well as additional resources being published every now and then:

* [PHP Weekly](http://www.phpweekly.com)
* [JavaScript Weekly](https://javascriptweekly.com/)
* [Frontend Focus](https://frontendfoc.us/)
* [Mobile Web Weekly](https://mobiledevweekly.com/)

There are also Weeklies on other platforms you might be interested in; here's [a list of some](https://github.com/jondot/awesome-weekly).

### PHP universe

* [PHP Developer blog](https://blog.phpdeveloper.org/)


## Video Tutorials {#videos}

### YouTube Channels
* [PHP Academy](https://www.youtube.com/user/phpacademy)
* [The New Boston](https://www.youtube.com/user/thenewboston)
* [Sherif Ramadan](https://www.youtube.com/user/businessgeek)
* [Level Up Tuts](https://www.youtube.com/user/LevelUpTuts)

### Paid Videos

* [Standards and Best practices](https://teamtreehouse.com/library/php-standards-and-best-practices)
* [PHP Training on Pluralsight](https://www.pluralsight.com/search?q=php)
* [PHP Training on Lynda.com](https://www.lynda.com/search?q=php)
* [PHP Training on Tutsplus](https://code.tutsplus.com/categories/php/courses)
* [Laracasts](https://laracasts.com/)


## Components {#components_title}

As mentioned above "Components" are another approach to the common goal of creating, distributing and implementing
shared code. Various component repositories exist, the main two of which are:

* [Packagist]
* [PEAR]

Both of these repositories have command line tools associated with them to help the installation and upgrade processes,
and have been explained in more detail in the [Dependency Management] section.

There are also component-based frameworks and component-vendors that offer no framework at all. These projects provide
another source of packages which ideally have little to no dependencies on other packages, or specific frameworks.

For example, you can use the [FuelPHP Validation package], without needing to use the FuelPHP framework itself.

* [Aura]
* CakePHP Components
    * [Collection]
    * [Database]
    * [Datasource]
    * [Event]
    * [I18n]
    * [ORM]   
* [FuelPHP]
* [Hoa Project]
* [Symfony Components]
* [The League of Extraordinary Packages]
* Laravel's Illuminate Components
    * [IoC Container]
    * [Eloquent ORM]
    * [Queue]

_Laravel's [Illuminate components] will become better decoupled from the Laravel framework. For now, only the
components best decoupled from the Laravel framework are listed above._


[Packagist]: /#composer_and_packagist
[PEAR]: /#pear
[Dependency Management]: /#dependency_management
[FuelPHP Validation package]: https://github.com/fuelphp/validation
[Aura]: http://auraphp.com/framework/
[FuelPHP]: https://github.com/fuelphp
[Hoa Project]: https://github.com/hoaproject
[Symfony Components]: https://symfony.com/doc/current/components/index.html
[The League of Extraordinary Packages]: https://thephpleague.com/
[IoC Container]: https://github.com/illuminate/container
[Eloquent ORM]: https://github.com/illuminate/database
[Queue]: https://github.com/illuminate/queue
[Illuminate components]: https://github.com/illuminate
[Collection]: https://github.com/cakephp/collection
[Database]: https://github.com/cakephp/database
[Datasource]: https://github.com/cakephp/datasource
[Event]: https://github.com/cakephp/event
[I18n]: https://github.com/cakephp/i18n
[ORM]: https://github.com/cakephp/orm


## PHP PaaS Providers {#php_paas_providers_title}

* [AppFog](https://www.ctl.io/appfog/)
* [Amezmo](https://www.amezmo.com)
* [AWS Elastic Beanstalk](https://aws.amazon.com/elasticbeanstalk/)
* [Cloudways](https://www.cloudways.com/)
* [Divio](https://www.divio.com/php/)
* [Engine Yard Cloud](https://www.engineyard.com/features)
* [fortrabbit](https://www.fortrabbit.com/)
* [Google App Engine](https://cloud.google.com/appengine/docs/php/)
* [Heroku](https://devcenter.heroku.com/categories/php-support)
* [IBM Cloud](https://console.bluemix.net/docs/runtimes/php/getting-started.html#getting_started)
* [Jelastic](https://jelastic.com/)
* [Microsoft Azure](https://azure.microsoft.com/)
* [Nanobox](https://nanobox.io/)
* [Pivotal Web Services](https://run.pivotal.io/)
* [Platform.sh](https://platform.sh/)
* [Red Hat OpenShift](https://www.openshift.com/)

To see which versions these PaaS hosts are running, head over to [PHP Versions](http://phpversions.info/paas-hosting/).


# Resources {#resources_title}


## Frameworks {#frameworks_title}

Rather than re-invent the wheel, many PHP developers use frameworks to build out web applications. Frameworks abstract
away many of the low-level concerns and provide helpful, easy-to-use interfaces to complete common tasks.

You do not need to use a framework for every project. Sometimes plain PHP is the right way to go, but if you do need a
framework then there are three main types available:

* Micro Frameworks
* Full-Stack Frameworks
* Component Frameworks

Micro-frameworks are essentially a wrapper to route a HTTP request to a callback, controller, method, etc as quickly as
possible, and sometimes come with a few extra libraries to assist development such as basic database wrappers and the
like. They are prominently used to build remote HTTP services.

Many frameworks add a considerable number of features on top of what is available in a micro-framework; these are
called Full-Stack Frameworks. These often come bundled with ORMs, Authentication packages, etc.

Component-based frameworks are collections of specialized and single-purpose libraries. Disparate component-based
frameworks can be used together to make a micro- or full-stack framework.


## From the Source {#from_the_source_title}

* [PHP Website](https://secure.php.net/)
* [PHP Documentation](https://secure.php.net/docs.php)
